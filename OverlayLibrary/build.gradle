/*
 * Copyright (C) 2016 Samuel Wall
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'jacoco'
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// Maven Group ID for the artifact
group = 'uk.co.samuelwall'
version rootProject.versionName

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    buildToolsVersion '25.0.0'
}

configurations {
    javadocCompile
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-annotations:' + rootProject.supportLibVersion

    testCompile 'com.android.support:support-annotations:' + rootProject.supportLibVersion
    testCompile 'junit:junit:4.12'
    testCompile "org.robolectric:robolectric:3.1"
    testCompile 'org.mockito:mockito-core:1.10.19'

    javadocCompile 'com.android.support:support-annotations:' + rootProject.supportLibVersion
}

install {
    repositories.mavenInstaller {
        pom {
            //noinspection GroovyAssignabilityCheck
            project {
                packaging 'aar'
                name 'material-tap-target-prompt'
                url 'https://github.com/sjwall/MaterialTapTargetPrompt'

                groupId 'uk.co.samuelwall'
                artifactId 'material-tap-target-prompt'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'sjwall'
                        name 'Samuel Wall'
                        email 'wallsamuelj@gmail.com'
                    }
                }
                scm {
                    connection 'https://github.com/sjwall/MaterialTapTargetPrompt.git'
                    developerConnection 'https://github.com/sjwall/MaterialTapTargetPrompt.git'
                    url 'https://github.com/sjwall/MaterialTapTargetPrompt'

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocCompile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
bintray {
    Properties properties = new Properties()
    File propertiesFile = project.rootProject.file('local.properties');
    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
    }

    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']

    publish = false
    pkg {
        repo = 'maven'
        name = 'material-tap-target-prompt'
        desc = 'Material Design tap target for Android'
        websiteUrl = 'https://github.com/sjwall/MaterialTapTargetPrompt'
        vcsUrl = 'https://github.com/sjwall/MaterialTapTargetPrompt.git'
        licenses = ["Apache-2.0"]
        publicDownloadNumbers = false
    }
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

//gradlew clean jacocoTestReport
task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    reports {
        xml.enabled = true
        html.enabled = true
    }


    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    additionalSourceDirs = files([mainSrc])
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}
